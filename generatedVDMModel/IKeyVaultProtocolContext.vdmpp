class generated_vdm_VDMKeyVaultProtocolContext
types
-- TODO Define types here
values
-- TODO Define values here
instance variables
-- TODO Define instance variables here
operations
public setJavaObject: (seq of char) ==> ()
setJavaObject(vdmObjectName) == is not yet specified;

pure public GenerateChallenge:() ==> (seq of int)
GenerateChallenge() == is not yet specified
post len RESULT = 128;

pure public EncryptChallenge:(seq of int) ==> (seq of int)
EncryptChallenge(challenge) == is not yet specified
post RESULT <> challenge;

pure public CheckChallengeAnswer:(seq of int) ==> (bool)
CheckChallengeAnswer(challengeAnswer) == is not yet specified
post RESULT = true;

pure public DecryptChallenge:(seq of char) ==> (seq of char)
DecryptChallenge(encryptedChallenge) == is not yet specified
post RESULT <> encryptedChallenge;

pure public CheckControllerCertificate:(seq of char) ==> (bool)
CheckControllerCertificate(certificateString) == is not yet specified
post RESULT = true;

pure public CheckSigningRequestSignature:(seq of char) * (seq of char) * (seq of char) ==> (bool)
CheckSigningRequestSignature(controllerIdString,keyString,expectedSignature) == is not yet specified
post RESULT = true;

pure public GenerateEffectiveCertificate:(seq of char) ==> (seq of char)
GenerateEffectiveCertificate(effectiveKeyString) == is not yet specified;

public SaveEffectiveCertificate:(seq of char) ==> ()
SaveEffectiveCertificate(effectiveCertificate) == is not yet specified;

pure public GetEffectiveCertificateSignature:(seq of char) * (seq of char) * (seq of char) ==> (seq of char)
GetEffectiveCertificateSignature(controllerIdString,effectiveCertificateString,caCertificateString) == is not yet specified;

public SendMessage:(seq of char) * (seq of char) ==> ()
SendMessage(type,contents) == is not yet specified;

functions
-- TODO Define functions here
traces
-- TODO Define Combinatorial Test Traces here
end generated_vdm_VDMKeyVaultProtocolContext