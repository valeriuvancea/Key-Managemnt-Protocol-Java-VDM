class generated_vdm_VDMControllerProtocolContext
types
-- TODO Define types here
values
-- TODO Define values here
instance variables
-- TODO Define instance variables here
operations
public setJavaObject: (seq of char) ==> ()
setJavaObject(vdmObjectName) == is not yet specified;

pure public DecryptChallenge:(seq of char) ==> (seq of char)
DecryptChallenge(encryptedChallenge) == is not yet specified
post RESULT <> encryptedChallenge;

pure public GenerateChallenge:() ==> (seq of int)
GenerateChallenge() == is not yet specified
post len RESULT=128;

pure public CheckChallengeAnswer:(seq of int) ==> (bool)
CheckChallengeAnswer(challengeAnswer) == is not yet specified
post RESULT = true;

pure public GetEffectivePendingPublicKey:() ==> (seq of char)
GetEffectivePendingPublicKey() == is not yet specified;

public SaveEffectiveKeys:(seq of char) * (seq of char) * (seq of char) ==> ()
SaveEffectiveKeys(effectiveCertificateString,effectivePublicKeyString,effectivePrivateKeyString) == is not yet specified;

public SendMessage:(seq of char) * (seq of char) * (seq of char) ==> ()
SendMessage(address,type,contents) == is not yet specified;

pure public EncryptChallenge:(seq of int) ==> (seq of int)
EncryptChallenge(challenge) == is not yet specified
post RESULT <> challenge;

pure public CheckKeyVaultCertificate:(seq of char) ==> (bool)
CheckKeyVaultCertificate(certificateString) == is not yet specified
post RESULT = true;

pure public GetSigningRequestSignature:(seq of char) * (seq of char) * (seq of char) ==> (seq of char)
GetSigningRequestSignature(controllerIdString,keyString,signingKeyPath) == is not yet specified;

pure public GetEffectivePendingPrivateKey:() ==> (seq of char)
GetEffectivePendingPrivateKey() == is not yet specified;

functions
-- TODO Define functions here
traces
-- TODO Define Combinatorial Test Traces here
end generated_vdm_VDMControllerProtocolContext