class KeyVaultProtocolContext
types
-- TODO Define types here
values

allowedMessageOrder : map Message`MessageType  to set of Message`MessageType = {
	<UNKNOWN> |-> {<KEY_VAULT_DISCOVERY_REPLY>},
	<KEY_VAULT_DISCOVERY_REPLY> |-> {<KEY_VAULT_DISCOVERY_REPLY>, <CHALLENGE_SUBMISSION>},
	<CHALLENGE_SUBMISSION> |-> {<CHALLENGE_SUBMISSION> , <KEY_VAULT_CERTIFICATE>},
	<KEY_VAULT_CERTIFICATE> |-> {<KEY_VAULT_CERTIFICATE>, <CHALLENGE_ANSWER>},
	<CHALLENGE_ANSWER> |-> {<CHALLENGE_ANSWER>, <SIGNING_REPLY>},
	<SIGNING_REPLY> |-> {<SIGNING_REPLY>, <RE_KEY_REQUEST>},
	<RE_KEY_REQUEST> |-> {<RE_KEY_REQUEST>, <SIGNING_REPLY>}
};

instance variables
	javaObject: generated_vdm_VDMKeyVaultProtocolContext := new generated_vdm_VDMKeyVaultProtocolContext();

	generatedChallenge: seq of int := [];

	private previousMessage : Message`MessageType := <UNKNOWN>;
operations
public setJavaObject: (seq of char) ==> ()
setJavaObject(vdmObjectName) == javaObject.setJavaObject(vdmObjectName);

public GENERATED_GenerateChallenge:() ==> (seq of int)
GENERATED_GenerateChallenge() == (
	generatedChallenge := javaObject.GenerateChallenge();
	return generatedChallenge;
);

public GENERATED_SendMessage:(seq of char) * (seq of char) ==> ()
GENERATED_SendMessage(type,contents) == (
	previousMessage := Message`StringToMessageType(type);
	return javaObject.SendMessage(type,contents);
)pre (
	    let messageType : Message`MessageType = Message`StringToMessageType(type) in (
	        messageType in set dom allowedMessageOrder and
          	messageType in set allowedMessageOrder(previousMessage)));

public GENERATED_EncryptChallenge:(seq of int) ==> (seq of int)
GENERATED_EncryptChallenge(challenge) == (
	--Extra VDM expressions can be added to this operation
	javaObject.EncryptChallenge(challenge);
) pre generatedChallenge = challenge;

public GENERATED_CheckChallengeAnswer:(seq of int) ==> (bool)
GENERATED_CheckChallengeAnswer(challengeAnswer) == (
	--Extra VDM expressions can be added to this operation
	javaObject.CheckChallengeAnswer(challengeAnswer);
) pre challengeAnswer = generatedChallenge;

public GENERATED_CheckControllerCertificate:(seq of char) ==> (bool)
GENERATED_CheckControllerCertificate(certificateString) == (
	--Extra VDM expressions can be added to this operation
	javaObject.CheckControllerCertificate(certificateString);
);

public GENERATED_DecryptChallenge:(seq of char) ==> (seq of char)
GENERATED_DecryptChallenge(encryptedChallenge) == (
	--Extra VDM expressions can be added to this operation
	javaObject.DecryptChallenge(encryptedChallenge);
);

functions
-- TODO Define functions here
traces
-- TODO Define Combinatorial Test Traces here
end KeyVaultProtocolContext